import Bootstrapper = require("../../Bootstrapper");
import BootstrapParams = require("../../BootstrapParams");
import {MetricType} from "./MetricType";
import Params = require("../../Params");

interface IExtension{
    addTimestamp(uri: string): string;
    bootstrapper: Bootstrapper;
    changeLocale(locale: string): void;
    config: any;
    create(): void;
    createModules(): void;
    //currentRangePath: string;
    dependenciesLoaded(): void;
    domain: string;
    embedDomain: string;
    embedHeight: number;
    embedWidth: number;
    getAlternateLocale(): any;
    getCanvasIndexParam(): number;
    getCanvasLabels(label: string): string;
    getCurrentCanvases(): Manifesto.ICanvas[];
    getCurrentCanvasRange(): Manifesto.IRange;
    getDependencies(callback: (deps: any) => void): any;
    getDomain(): string;
    getEmbedDomain(): string;
    getExternalResources(resources?: Manifesto.IExternalResource[]): Promise<Manifesto.IExternalResource[]>;
    getIIIFShareUrl(): string;
    getLocales(): any[];
    getPagedIndices(canvasIndex?: number): number[];
    getParam(key: Params): any;
    getSequenceIndexParam(): number;
    getSerializedLocales(): string;
    getSettings(): ISettings;
    getShareUrl(): string;
    height(): number;
    helper: Manifold.IHelper;
    isCreated: boolean;
    isDeepLinkingEnabled(): boolean;
    isFooterPanelEnabled(): boolean;
    isFullScreen(): boolean;
    isHeaderPanelEnabled(): boolean;
    isHomeDomain: boolean;
    isLeftPanelEnabled(): boolean;
    isLightbox: boolean;
    isLoggedIn: boolean;
    isOnHomeDomain(): boolean;
    isOnlyInstance: boolean;
    isOverlayActive(): boolean;
    isReload: boolean;
    isRightPanelEnabled(): boolean;
    isSeeAlsoEnabled(): boolean;
    jsonp: boolean;
    lastCanvasIndex: number;
    loadDependencies(deps: any): void;
    locale: string;
    locales: any[];
    metric: MetricType;
    mouseX: number;
    mouseY: number;
    name: string;
    redirect(uri: string): void;
    refresh(): void;
    reload(params?: BootstrapParams);
    resize(): void;
    resources: Manifold.ExternalResource[];
    sanitize(html: string): string;
    serializeLocales(locales: any[]): string;
    shifted: boolean;
    showMessage(message: string, acceptCallback?: any, buttonText?: string, allowClose?: boolean): void;
    tabbing: boolean;
    triggerSocket(eventName: string, eventObject?: any): void;
    updateSettings(settings: ISettings): void;
    viewCanvas(canvasIndex): void;
    viewCollection(collection: Manifesto.ICollection): void;
    viewManifest(manifest: Manifesto.IManifest): void;
    width(): number;
}

export = IExtension;